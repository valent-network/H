<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8" />
  <title>Valent | Dashboard</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <meta name="description" content="Valent Dashboard" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
  <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="favicon-16x16.png">
  <link rel="apple-touch-icon" type="image/png" sizes="180x180" href="apple-touch-icon.png">
  <link rel="icon" type="image/svg+xml" href="favicon.svg">
  <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/persist@3.x.x/dist/cdn.min.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.3.0/chart.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
</head>
<body x-data="App">
  <div class="container is-fluid mt-4">
    <template x-if="!token"> 
      <div class="field">
        <div class="control">
          <input class="input" placeholder="Paste token" type="text" x-model="token">
        </div>
      </div>
    </template>
    <template x-if="token">
      <div>
        <div class="has-text-centered">
          <p x-show="!data && !error">Loading...</p>
          <p x-show="!data && error" x-text="error">Error</p>
          <button x-show="error" class="button is-danger mt-4" x-on:click="token = null">Reset token</button>
        </div>
        <template x-if="data">
          <div>
            <div class="table-container">
              <table x-show="data" class="table is-fullwidth is-bordered is-hoverable is-striped is-narrow mt-4 mb-26">
                <thead>
                  <tr>
                    <th>Updated At</th>
                    <th>Last User</th>
                    <th>Last Ad</th>
                    <th>Last Effective Ad</th>
                    <th>last Message</th>
                    <th>Last ChatRoom</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td x-text="(new Date(data.updated_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' })"></td>
                    <td x-text="(new Date(data.last_user_created_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })"></td>
                    <td x-text="(new Date(data.last_ad_created_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })"></td>
                    <td x-text="(new Date(data.last_effective_ad_created_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })"></td>
                    <td x-text="(new Date(data.last_message_created_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })"></td>
                    <td x-text="(new Date(data.last_chat_room_created_at)).toLocaleDateString('en-US', { month: 'long', day: 'numeric' })"></td>
                    <td><button x-show="token" class="button is-danger is-small" x-on:click="token = null">Log out</button></td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div class="columns" x-init="drawCharts(data)">
              <div class='column is-one-third'>
                <div class='mb-3'>
                  <canvas id="MAU"></canvas>
                </div>
                <div class='mb-3'>
                  <canvas id="DAU"></canvas>
                </div>
                <div class='mb-3'>
                  <canvas id="DVA"></canvas>
                </div>
              </div>
              <div class='column is-one-third'>
                <div class='mb-3'>
                  <H1 class="is-size-1">Ads</H1>
                  <canvas class='m-auto' id="Ads"></canvas>
                </div>
                <div class='mb-3'>
                  <H1 class="is-size-1">Users</H1>
                  <canvas class='m-auto' id="Users"></canvas>
                </div>
                <div class='mb-3'>
                  <H1 class="is-size-1">Devices</H1>
                  <canvas class='m-auto' id="Devices"></canvas>
                </div>

              </div>
              <div class='column is-one-third'>
                <div class='mb-3'>
                  <H1 class="is-size-1">Active Ads</H1>
                  <canvas class='m-auto' id="ActiveAds"></canvas>
                </div>
                <div class='mb-3'>
                  <H1 class="is-size-1">Users With Contacts</H1>
                  <canvas class='m-auto' id="UsersWithContacts"></canvas>
                </div>
                <div class='mb-3'>
                  <H1 class="is-size-1">User Contacts</H1>
                  <canvas class='m-auto' id="UserContacts"></canvas>
                </div>
              </div>
            </div>
          </div>
        </template>
      </div>
    </template>
  </div>

  <script type="text/javascript">
    const API_URL = "$VALENT_API_HOST";

    function App() {
      return {
        token: Alpine.$persist(null).as('valent.admin.token'),
        data: Alpine.$persist(null).as('valent.dashboard.data'),
        error: null,
        init() {
          this.getDashboardData();
        },
        drawCharts(data) {
          const mappedMAUData = JSON.parse(data.mau_chart_data).map( x => ({count: x.count, date: (new Date(x.date+"-01")).toLocaleString('en-US', { month: 'long' })}));

          new Chart(document.getElementById('MAU'), this.basicLineChart("MAU", mappedMAUData));
          new Chart(document.getElementById('DAU'), this.timeLineChart("DAU", JSON.parse(data.user_activity_chart_data)), "week");
          new Chart(document.getElementById('DVA'), this.timeLineChart("DVA", JSON.parse(data.visited_ad_chart_data)), "week");
          new Chart(document.getElementById('Ads'), this.basePieChart([data.known_ads_count, data.ads_count - data.known_ads_count], ['Known', 'Unknown']));
          new Chart(document.getElementById('Users'), this.basePieChart([data.users_count - data.users_with_no_contacts_count, data.users_with_no_contacts_count], ['w Contacts', 'w/o Contacts']));
          new Chart(document.getElementById('ActiveAds'), this.basePieChart([data.effective_ads_count, data.active_ads_count - data.effective_ads_count], ['Effective', 'Other']));
          new Chart(document.getElementById('Devices'), this.basePieChart(JSON.parse(data.user_devices_os_data).map(d => d.count), JSON.parse(data.user_devices_os_data).map(d => d.os_title)));
          new Chart(document.getElementById('UsersWithContacts'), this.basePieChart([((data.users_count - data.users_with_no_contacts_count) - data.users_with_no_connections_count), data.users_with_no_connections_count], ['Have Connections', 'No Connections']));
          new Chart(document.getElementById('UserContacts'), this.basePieChart([data.user_contacts_count - data.uniq_user_contacts_count, data.uniq_user_contacts_count], ['Duplicate', 'Unique']));
        },
        async getDashboardData() {
          return fetch(`${API_URL}/api/integrations/dashboard?access_token=${this.token}`)
            .then(response => response.json())
            .then(data => this.data = data.records[0])
            .catch(error => console.log(this.error = error))
        },
        timeLineChart (chartName, data, timeUnit) {
          return {
            ...this.basicLineChart(chartName, data),
            options: {
              ...this.basicLineChart(chartName, data).options,
              scales: {
                  x: {
                      type: 'time',
                      time: {
                          unit: timeUnit
                      }
                  }
              }
            }
          }
        },
        basicLineChart (chartName, data) {
          return {
            type: 'line',
            data: {
              datasets: [{
                label: chartName,
                data: data
              }]
            },
            options: {
              parsing: {
                xAxisKey: 'date',
                yAxisKey: 'count'
              },
            }
          }
        },
        basePieChart (data, labels) {
          return {
            type: 'pie',
            data: {
              datasets: [{
                data: data,
              }],
            labels: labels,
            },
            options: {
              responsive: false,
              plugins: {
                  tooltip: {
                      callbacks: {
                          label: (Item) => ' ' + Item.label + ' ' + Item.formattedValue + ' (' + (((Item.raw  / data.reduce((accumulator, currentValue) => accumulator + currentValue, 0)) * 100).toFixed()) + '%)'
                      }
                  }
              },
            }
          }
        }
      }
    }
  </script>
</body>
</html>